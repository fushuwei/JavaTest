<?xml version="1.0"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
-->

<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!--
    This is a checkstyle configuration file. For descriptions of
    what the following rules do, please see the checkstyle configuration
    page at http://checkstyle.sourceforge.net/config.html.

    This file is based on the checkstyle file of Apache Beam.
-->

<module name="Checker">

    <property name="charset" value="UTF-8"/>

    <!-- 文件长度不超过3000行 -->
    <module name="FileLength">
        <property name="max" value="3000"/>
    </module>

    <!-- 检查文件中是否含制表符 ('\t') -->
    <module name="FileTabCharacter"/>

    <!-- 检查行的结尾是否有空格 -->
    <module name="RegexpSingleline">
        <property name="format" value="\s+$"/>
        <property name="message" value="行的结尾不能有空格"/>
    </module>

    <!-- 检查文件是否以一个空行结束 -->
    <module name="NewlineAtEndOfFile">
        <property name="lineSeparator" value="lf"/>
    </module>

    <!-- 检查property文件中是否有相同的key, 用于国际化配置文件 -->
    <module name="Translation"/>

    <!-- 检查Java文件的语法树 -->
    <module name="TreeWalker">

        <!-- ******************** Size Violations ******************** -->

        <!-- 检查每行代码的字符个数 -->
        <module name="LineLength">
            <property name="max" value="120"/>
        </module>

        <!-- 检查方法行数, 不能超过300行 -->
        <module name="MethodLength">
            <property name="max" value="300"/>
        </module>

        <!-- ******************** Naming Conventions ******************** -->

        <!-- 检查包名, 只允许小写字母 -->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            <message key="name.invalidPattern" value="包名 ''{0}'' 要符合 ''{1}'' 格式."/>
        </module>

        <!-- 检查类型名称 -->
        <module name="TypeName">
            <message key="name.invalidPattern" value="类型名称 ''{0}'' 要符合 ''{1}'' 格式."/>
        </module>

        <!-- 检查实例变量名称 -->
        <module name="MemberName">
            <message key="name.invalidPattern" value="实例变量名称 ''{0}'' 要符合 ''{1}'' 格式."/>
        </module>

        <!-- 检查方法名称 -->
        <module name="MethodName">
            <message key="name.invalidPattern" value="方法名称 ''{0}'' 要符合 ''{1}'' 格式."/>
        </module>

        <!-- 检查方法参数名称 -->
        <module name="ParameterName">
            <message key="name.invalidPattern" value="方法参数名称 ''{0}'' 要符合 ''{1}'' 格式."/>
        </module>

        <!-- 检查常量名称 -->
        <module name="ConstantName">
            <message key="name.invalidPattern" value="常量名称 ''{0}'' 要符合 ''{1}'' 格式."/>
        </module>

        <!-- 检查 static, non-final 的变量名称是否符合指定的模式。 -->
        <module name="StaticVariableName"/>

        <!-- 检查 final 变量名称是否符合指定的模式 -->
        <module name="LocalFinalVariableName"/>

        <!-- 检查 non-final 变量名称是否符合指定的模式，包括catch中的参数的检查 -->
        <module name="LocalVariableName"/>

        <!-- ******************** Imports ******************** -->

        <!-- 检查带有 * 号的导入 -->
        <module name="AvoidStarImport"/>

        <!-- 检查是否从非法的包导入 -->
        <module name="IllegalImport"/>

        <!-- 检查是否导入了多余的包 -->
        <module name="RedundantImport"/>

        <!-- 检查未使用的导入语句 -->
        <module name="UnusedImports"/>

        <!-- ******************** Class Design ******************** -->

        <!-- 检查只有 private 构造函数的类是否声明为 final -->
        <module name="FinalClass"/>

        <!-- 检查仅包含静态方法或字段的类有没有公共构造函数 -->
        <module name="HideUtilityClassConstructor"/>

        <!-- ******************** Modifiers ******************** -->

        <!-- 检查修饰符的顺序是否符合 Java 语言规范 -->
        <module name="ModifierOrder"/>

        <!-- 检查冗余修饰符 -->
        <module name="RedundantModifier"/>

        <!-- ******************** Coding ******************** -->

        <!-- 检测空语句 -->
        <module name="EmptyStatement"/>

        <!-- 检查重写 equals() 的类是否也重写 hashCode() -->
        <module name="EqualsHashCode"/>

        <!-- 检查局部变量或参数是否隐藏了类中的变量 -->
        <module name="HiddenField">
            <property name="tokens" value="VARIABLE_DEF"/>
        </module>

        <!-- 检查首选工厂方法的非法实例化 -->
        <module name="IllegalInstantiation"/>

        <!-- 检查子表达式中是否有赋值操作 -->
        <module name="InnerAssignment"/>

        <!-- 检查 switch 语句是否有默认子句 -->
        <module name="MissingSwitchDefault"/>

        <!-- 检查过于复杂的布尔表达式 -->
        <module name="SimplifyBooleanExpression"/>

        <!-- 检查过于复杂的布尔返回语句 -->
        <module name="SimplifyBooleanReturn"/>

        <!-- 检查字符串是否与 == 或 != 一起使用 -->
        <module name="StringLiteralEquality"/>

        <!-- 检查 switch 语句 -->
        <module name="FallThrough"/>

        <!-- 检查 if-else 块的嵌套深度，最大不能超过5层 -->
        <module name="NestedIfDepth">
            <property name="max" value="5"/>
        </module>

        <!-- 检查 try-catch-finally 块的嵌套深度，最大不能超过3层 -->
        <module name="NestedTryDepth">
            <property name="max" value="3"/>
        </module>

        <!-- ******************** Whitespace ******************** -->

        <!-- 检查方法定义、方法调用以及参数列表与左括号标识符之间的填充 -->
        <module name="MethodParamPad"/>

        <!-- 检查类型转换的括号填充策略 -->
        <module name="TypecastParenPad"/>

        <!-- 检查空迭代器的填充 -->
        <module name="EmptyForIteratorPad"/>

        <!-- 检查通用标记尖括号 ('<' 和 '>') 周围的空格是否符合典型约定 -->
        <module name="GenericWhitespace"/>

        <!-- 检查在某个特定关键字之前应保留空格 -->
        <module name="NoWhitespaceBefore"/>

        <!-- 检查在某个特定关键字之后应保留空格 -->
        <module name="NoWhitespaceAfter"/>

        <!-- 检查在运算符上换行的策略 -->
        <module name="OperatorWrap"/>

        <!-- 检查括号填充的策略 -->
        <module name="ParenPad"/>

        <!-- 检查分隔符后面是否有空格，但不检查空 for 迭代器的分号后是否有空格 -->
        <module name="WhitespaceAfter"/>

        <!-- 检查各种标记是否被空白包围 -->
        <module name="WhitespaceAround"/>

        <!-- 检查包之前的空行分隔符、所有导入声明、字段、构造函数、方法、嵌套类、静态初始化程序和实例初始化程序 -->
        <module name="EmptyLineSeparator">
            <property name="allowMultipleEmptyLines" value="false"/>
            <property name="allowMultipleEmptyLinesInsideClassMembers" value="false"/>
            <property name="tokens"
                      value="PACKAGE_DEF , IMPORT , STATIC_IMPORT , CLASS_DEF , INTERFACE_DEF , ENUM_DEF , STATIC_INIT , INSTANCE_INIT , METHOD_DEF , CTOR_DEF"/>
            <!-- <property name="tokens" value="PACKAGE_DEF , IMPORT , STATIC_IMPORT , CLASS_DEF , INTERFACE_DEF , ENUM_DEF , STATIC_INIT , INSTANCE_INIT , METHOD_DEF , CTOR_DEF , RECORD_DEF , COMPACT_CTOR_DEF"/> -->
        </module>

        <!-- ******************** Block Checks ******************** -->

        <!-- 检查是否有嵌套代码块 -->
        <module name="AvoidNestedBlocks"/>

        <!-- 检查是否有空代码块 -->
        <module name="EmptyBlock"/>

        <!-- 检查左大括号位置 -->
        <module name="LeftCurly"/>

        <!-- 检查代码块是否缺失大括号 -->
        <module name="NeedBraces"/>

        <!-- 检查右大括号位置 -->
        <module name="RightCurly"/>

        <!-- ******************** Miscellaneous ******************** -->

        <!-- 检查 Java 代码的缩进 -->
        <module name="Indentation"/>

        <!-- 检查 TODO -->
        <!-- <module name="TodoComment"/> -->

        <!-- 检查数组类型 -->
        <module name="ArrayTypeStyle">
            <message key="array.type.style" value="定义数组时中括号位置错误."/>
        </module>

        <!-- 检查 long 类型的变量是否用上 ell (即小写的'l') 定义 -->
        <module name="UpperEll"/>

        <!-- ******************** Regexp ******************** -->

        <!-- 检查是否存在多个连续分号 -->
        <module name="RegexpSinglelineJava">
            <property name="format" value=";{2,}"/>
            <property name="ignoreComments" value="true"/>
            <property name="message" value="分号重复"/>
        </module>

        <!-- 检查文件中是否包含 System.out.print -->
        <module name="RegexpSinglelineJava">
            <property name="format" value="System\.out\.print"/>
            <property name="message" value="不允许出现 System.out.print 或 System.out.println 语句"/>
        </module>

        <!-- 检查文件中是否包含 e.printStacktrace -->
        <module name="RegexpSinglelineJava">
            <property name="format" value="[\s\S].printStackTrace"/>
            <property name="message" value="不允许直接在控制台输出异常日志, 请记录到日志文件"/>
        </module>

        <!-- ******************** Javadoc Comments ******************** -->

        <!-- 检查类型定义的 Javadoc -->
        <module name="JavadocType"/>

        <!-- 检查方法或构造函数的 Javadoc -->
        <module name="JavadocMethod">
            <!-- 允许 get set 方法没有注释 -->
            <property name="allowMissingPropertyJavadoc" value="true"/>
        </module>

        <!-- 检查属性对应的方法是否有 Javadoc -->
        <!-- <module name="MissingJavadocMethod"> -->
        <!--     <property name="allowMissingPropertyJavadoc" value="true"/> -->
        <!-- </module> -->

        <!-- 检查变量的 Javadoc -->
        <!-- <module name="JavadocVariable"/> -->

        <!-- 检查 Javadoc 段落 -->
        <module name="JavadocParagraph"/>

        <!-- 检查 Javadoc 注释格式 -->
        <module name="JavadocStyle">
            <property name="checkFirstSentence" value="false"/>
        </module>
    </module>
</module>
